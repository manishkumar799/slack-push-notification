require("dotenv").config();
const {
  sendSlackMessage,
  joinSlackChannel,
  sendSlackMultiImage,
} = require("./utils/slack.util");

// console.log("ðŸš€ Slack Notifier ðŸš€");
// // joinSlackChannel(process.env.SLACK_CHANNEL_ID);
// const sendMessage = async (message) => {
//   await sendSlackMessage(message);
// };

// sendMessage("This is generated by Notifier Test App");

const https = require("https");

// URL of the file you want to log
const url = "https://tpc.googlesyndication.com/simgad/9175322197911545976";
const imageUrls = [
  "https://tpc.googlesyndication.com/simgad/9175322197911545976",
  "https://t3.ftcdn.net/jpg/06/15/49/68/360_F_615496890_W34yB8VDE6n5pehb5QCt1ek5oEvRo9qA.jpg",
  "https://sandbox.returnranger.ikshudigital.com/ReturnRanger.png"
];
sendOneFile()

function sendOneFile() {
  https
    .get(url, (res) => {
      if (res.statusCode !== 200) {
        console.error(`Failed to get '${url}' (${res.statusCode})`);
        return;
      }

      let data = []; // Array to accumulate chunks of data

      // A chunk of data has been received
      res.on("data", (chunk) => {
        data.push(chunk); // Push each chunk to the array
      });

      // The whole response has been received
      res.on("end", async () => {
        const buffer = Buffer.concat(data); // Combine all chunks into a single Buffer
        try {
          const response = await sendSlackMessage(buffer); // Send the full file data
          console.log("File uploaded successfully:", response);
        } catch (error) {
          console.error("Error uploading file:", error);
        }
      });
    })
    .on("error", (err) => {
      console.error("Error fetching the file:", err);
    });
}

const downloadImage = (url) => {
  return new Promise((resolve, reject) => {
      https.get(url, (res) => {
          if (res.statusCode !== 200) {
              reject(new Error(`Failed to get '${url}' (${res.statusCode})`));
              return;
          }

          const data = [];
          res.on('data', (chunk) => data.push(chunk));
          res.on('end', () => {
              const buffer = Buffer.concat(data);
              resolve(buffer);
          });
      }).on('error', (err) => {
          reject(new Error("Error fetching the file: " + err.message));
      });
  });
};

// Function to download all images and send them
const sendAllImages = async () => {
  try {
      const buffers = await Promise.all(imageUrls.map(url => downloadImage(url)));
      for (const buffer of buffers) {
          const response = await sendSlackMessage(buffer);
          console.log('File uploaded successfully:', response);
      }
  } catch (error) {
      console.error('Error during image processing:', error);
  }
};

// sendAllImages();
